/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int ans=0;
    public int find(TreeNode root){
        if(root==null)
            return 0;
        else if(root.left==null&&root.right==null)
            return 1;
        else{
            int l=find(root.left);
            int r=find(root.right);
            if(root.left!=null&&root.left.val==root.val&&root.right!=null&&root.right.val==root.val){
                ans=Math.max(ans,l+r+1);
                return Math.max(l,r)+1;
            }
            else if(root.left!=null&&root.left.val==root.val){
                ans=Math.max(ans,l+1);
                return l+1;
            }
            else if(root.right!=null&&root.right.val==root.val){
                ans=Math.max(ans,r+1);
                return r+1;
            }
            
            ans=Math.max(ans,Math.max(l,r));
            return 1;
        
        }
    }
    public int longestUnivaluePath(TreeNode root) {
        
        find(root);
        if(ans==0)
            return 0;
        return ans-1;
    }
}
