class node{
    int r,c;
    public node(int r, int c){
        this.r=r;
        this.c=c;
    }
}


class Solution {
    public int[][] colorBorder(int[][] grid, int row, int col, int color) {
        int m=grid.length,n=grid[0].length,l=1,key=grid[row][col];
        int visited[][] = new int[m][n];
        int ans[][] = new int[m][n];
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                ans[i][j]=grid[i][j];
            }
        }
        Queue<node> queue = new LinkedList<>();
        queue.add( new node(row,col));
        visited[row][col]=1;

        while(l>0){
            node x= queue.remove();
            l-=1;
            
            if((x.r+1<m&& grid[x.r+1][x.c]!=key)||x.r+1>=m){
                ans[x.r][x.c]=color;
            }
            else if((x.r-1>=0&& grid[x.r-1][x.c]!=key)||x.r-1<0){
                ans[x.r][x.c]=color;
            }
             else if((x.c+1<n&& grid[x.r][x.c+1]!=key)||x.c+1>=n){
                ans[x.r][x.c]=color;
            }
            else if((x.c-1>=0&& grid[x.r][x.c-1]!=key)||x.c-1<0){
                ans[x.r][x.c]=color;
            }

            if(x.r+1<m&& grid[x.r+1][x.c]==key&&visited[x.r+1][x.c]==0){
                queue.add( new node (x.r+1,x.c));
                l+=1;
                visited[x.r+1][x.c]=1;
            }
            if(x.r-1>=0&& grid[x.r-1][x.c]==key&&visited[x.r-1][x.c]==0){
                queue.add( new node (x.r-1,x.c));
                l+=1;
                visited[x.r-1][x.c]=1;
            }
            if(x.c+1<n&& grid[x.r][x.c+1]==key&&visited[x.r][x.c+1]==0){
                queue.add( new node (x.r,x.c+1));
                l+=1;
                visited[x.r][x.c+1]=1;
            }
            if(x.c-1>=0&& grid[x.r][x.c-1]==key&&visited[x.r][x.c-1]==0){
                queue.add( new node (x.r,x.c-1));
                l+=1;
                visited[x.r][x.c-1]=1;
            }
        }
        return ans;
    }
}
