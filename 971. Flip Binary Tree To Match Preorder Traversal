/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int n,i=1,nums[];
    boolean flag=true;
    HashMap<TreeNode,Boolean> map = new HashMap<>();
    public void flip(TreeNode root){
        if(root==null)
            return ;
        TreeNode l=root.left;
        root.left=root.right;
        root.right=l;
    }
    public void find(TreeNode root,List<Integer> arr){
        if(i>=n||flag==false){
            System.out.println(arr);
            return;
        }
        if(root==null)
            return ;
        if(root.left!=null){
            if(root.left.val==nums[i]){
                i+=1;
                find(root.left,arr);
            }
            else if(map.get(root)==null&&root.right!=null&&root.right.val==nums[i]){
                flip(root);
                i+=1;
                arr.add(root.val);
                map.put(root,true);
                find(root.left,arr);
            }
            else{
                arr.clear();
                arr.add(-1);
                flag=false;
                return;
            }
        }
        
        if(root.right!=null){
            
            if(root.right.val==nums[i]){
                i+=1;
                find(root.right,arr);
            }
            else if(map.get(root)==null&&root.left!=null&&root.left.val==nums[i]){
                flip(root);
                i+=1;
                arr.add(root.val);
                map.put(root,true);
                find(root.right,arr);
            }
            else{
                arr.clear();
                arr.add(-1);
                flag=false;
            }
        }
    }
    public List<Integer> flipMatchVoyage(TreeNode root, int[] voyage) {
        
        n=voyage.length;
        nums=voyage;
        List<Integer> arr= new ArrayList<Integer> ();
        if(root.val!=voyage[0]){
            arr.add(-1);
            return arr;
        }
        find(root,arr);
        return arr;
    }
}
